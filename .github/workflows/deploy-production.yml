name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deployment_confirmation:
        description: 'Type "DEPLOY TO PRODUCTION" to confirm deployment'
        required: true
        type: string
      environment_target:
        description: 'Target environment (must be "production")'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      deployment_reason:
        description: 'Reason for this deployment (for audit trail)'
        required: true
        type: string
      components_to_deploy:
        description: 'Components to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - infrastructure-only
          - lambdas-only
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-2
  ENVIRONMENT: prod

jobs:
  validate-deployment-inputs:
    runs-on: ubuntu-latest
    outputs:
      deployment_approved: ${{ steps.validate.outputs.approved }}
      deployment_summary: ${{ steps.validate.outputs.summary }}
    
    steps:
    - name: Validate deployment confirmation
      id: validate
      run: |
        echo "üîç Validating deployment inputs..."
        
        # Check deployment confirmation
        if [[ "${{ github.event.inputs.deployment_confirmation }}" != "DEPLOY TO PRODUCTION" ]]; then
          echo "‚ùå Invalid deployment confirmation. Must type exactly: 'DEPLOY TO PRODUCTION'"
          echo "Received: '${{ github.event.inputs.deployment_confirmation }}'"
          exit 1
        fi
        
        # Check environment target
        if [[ "${{ github.event.inputs.environment_target }}" != "production" ]]; then
          echo "‚ùå Invalid environment target. Must be 'production'"
          exit 1
        fi
        
        # Check deployment reason is provided
        if [[ -z "${{ github.event.inputs.deployment_reason }}" ]]; then
          echo "‚ùå Deployment reason is required for audit trail"
          exit 1
        fi
        
        echo "‚úÖ All deployment inputs validated"
        echo "approved=true" >> $GITHUB_OUTPUT
        
        # Create deployment summary
        SUMMARY="**üöÄ Production Deployment Request**
        
        **Triggered by:** ${{ github.actor }}
        **Timestamp:** $(date -u)
        **Reason:** ${{ github.event.inputs.deployment_reason }}
        **Components:** ${{ github.event.inputs.components_to_deploy }}
        **Force Deploy:** ${{ github.event.inputs.force_deploy }}
        **Commit:** ${{ github.sha }}
        
        **‚ö†Ô∏è WARNING: This will deploy to PRODUCTION environment**"
        
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  deploy-production:
    needs: validate-deployment-inputs
    runs-on: ubuntu-latest
    environment: production
    if: needs.validate-deployment-inputs.outputs.deployment_approved == 'true'
    
    steps:
    - name: Display deployment summary
      run: |
        echo "## üö® PRODUCTION DEPLOYMENT INITIATED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.validate-deployment-inputs.outputs.deployment_summary }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install -r infrastructure/requirements.txt
    
    - name: Setup Node.js and AWS CDK
      run: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        npm install -g aws-cdk
    
    - name: Configure AWS credentials for production
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_PROD_DEPLOYMENT_ROLE_ARN }}
        role-duration-seconds: 3600
        role-session-name: GitHubActions-ProductionDeployment
    
    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
        echo "Deploying to account: $(aws sts get-caller-identity --query Account --output text)"
    
    - name: Set environment variables
      run: |
        echo "CDK_PROD_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
        echo "CDK_DEFAULT_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV
    
    - name: Validate deployment prerequisites
      run: |
        echo "Validating deployment prerequisites..."
        
        # Check if required scripts exist
        if [[ ! -f "scripts/deploy.sh" ]]; then
          echo "‚ùå scripts/deploy.sh not found"
          exit 1
        fi
        
        if [[ ! -f "scripts/package-lightweight-lambdas.py" ]]; then
          echo "‚ùå scripts/package-lightweight-lambdas.py not found"
          exit 1
        fi
        
        # Check if infrastructure directory exists
        if [[ ! -d "infrastructure" ]]; then
          echo "‚ùå infrastructure directory not found"
          exit 1
        fi
        
        echo "‚úÖ All prerequisites validated"
    
    - name: Package lightweight Lambda functions
      if: github.event.inputs.components_to_deploy == 'all' || github.event.inputs.components_to_deploy == 'lambdas-only'
      run: |
        echo "üì¶ Packaging optimized Lambda functions with AWS pandas layer support..."
        echo "Components to deploy: ${{ github.event.inputs.components_to_deploy }}"
        
        python scripts/package-lightweight-lambdas.py --function all --output-dir lambda-packages
        
        # Verify packages were created
        if [[ ! -d "lambda-packages" ]]; then
          echo "‚ùå Lambda packages directory not created"
          exit 1
        fi
        
        echo "üì¶ Created packages:"
        ls -la lambda-packages/
        echo "‚úÖ Lambda functions packaged successfully"
    
    - name: Skip Lambda packaging
      if: github.event.inputs.components_to_deploy == 'infrastructure-only'
      run: |
        echo "‚è≠Ô∏è Skipping Lambda packaging (infrastructure-only deployment)"
        mkdir -p lambda-packages
        echo "Empty directory created for consistency"
    
    - name: Pre-deployment safety check
      run: |
        echo "üîí Performing pre-deployment safety checks..."
        
        # Verify we're in the correct AWS account
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "Current AWS Account: $ACCOUNT_ID"
        
        # Add additional safety checks here if needed
        echo "‚úÖ Pre-deployment safety checks passed"
    
    - name: Deploy infrastructure using unified script
      run: |
        echo "üöÄ Deploying using unified deployment script..."
        echo "Components: ${{ github.event.inputs.components_to_deploy }}"
        echo "Force deploy: ${{ github.event.inputs.force_deploy }}"
        echo "Deployment reason: ${{ github.event.inputs.deployment_reason }}"
        
        chmod +x scripts/deploy.sh
        
        # Prepare deployment arguments
        DEPLOY_ARGS="--environment prod --region ${{ env.AWS_REGION }}"
        
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          DEPLOY_ARGS="$DEPLOY_ARGS --force"
        fi
        
        # Add component-specific deployment logic if needed
        case "${{ github.event.inputs.components_to_deploy }}" in
          "infrastructure-only")
            echo "üìã Deploying infrastructure components only..."
            ;;
          "lambdas-only")
            echo "üìã Deploying Lambda functions only..."
            ;;
          "all")
            echo "üìã Deploying all components..."
            ;;
        esac
        
        # Run deployment with error handling
        echo "Executing: ./scripts/deploy.sh $DEPLOY_ARGS"
        if ! ./scripts/deploy.sh $DEPLOY_ARGS; then
          echo "‚ùå Deployment failed"
          echo "Please check the logs above for details"
          exit 1
        fi
        
        echo "‚úÖ Infrastructure deployment completed successfully"
    
    - name: Validate deployment
      run: |
        echo "Validating deployment..."
        
        # Check Lambda functions
        echo "Checking Lambda functions..."
        aws lambda list-functions --query 'Functions[?contains(FunctionName, `avesa`) && contains(FunctionName, `prod`)].FunctionName' --output table
        
        # Check DynamoDB tables
        echo "Checking DynamoDB tables..."
        aws dynamodb describe-table --table-name TenantServices --query 'Table.TableStatus' --output text
        aws dynamodb describe-table --table-name LastUpdated --query 'Table.TableStatus' --output text
        
        # Check S3 bucket
        echo "Checking S3 bucket..."
        aws s3 ls s3://data-storage-msp-prod/ --summarize
        
        echo "‚úÖ Deployment validation completed"
    
    - name: Test Lambda function
      run: |
        echo "Testing ConnectWise Lambda function..."
        aws lambda invoke \
          --function-name avesa-connectwise-ingestion-prod \
          --payload '{"test": true}' \
          --cli-binary-format raw-in-base64-out \
          response.json
        
        echo "Lambda response:"
        cat response.json
        
        # Check for errors in response
        if grep -q "errorMessage" response.json; then
          echo "‚ùå Lambda function returned an error"
          exit 1
        else
          echo "‚úÖ Lambda function test passed"
        fi
    
    - name: Create deployment summary
      run: |
        echo "## ‚úÖ Production Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "**AWS Account:** $(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Components:** ${{ github.event.inputs.components_to_deploy }}" >> $GITHUB_STEP_SUMMARY
        echo "**Force Deploy:** ${{ github.event.inputs.force_deploy }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìù Audit Trail" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Reason:** ${{ github.event.inputs.deployment_reason }}" >> $GITHUB_STEP_SUMMARY
        echo "**Confirmation:** ${{ github.event.inputs.deployment_confirmation }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Deployed Resources" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Lambda Functions:**" >> $GITHUB_STEP_SUMMARY
        aws lambda list-functions --query 'Functions[?contains(FunctionName, `avesa`) && contains(FunctionName, `prod`)].FunctionName' --output text | tr '\t' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**DynamoDB Tables:**" >> $GITHUB_STEP_SUMMARY
        echo "- TenantServices" >> $GITHUB_STEP_SUMMARY
        echo "- LastUpdated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**S3 Buckets:**" >> $GITHUB_STEP_SUMMARY
        echo "- data-storage-msp-prod" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. **Tenant Setup:** Configure tenants using \`python scripts/setup-service.py\`" >> $GITHUB_STEP_SUMMARY
        echo "2. **Testing:** Validate all integrations are working correctly" >> $GITHUB_STEP_SUMMARY
        echo "3. **Monitoring:** Set up alerts and dashboards" >> $GITHUB_STEP_SUMMARY
        echo "4. **Backfill:** Run data backfill using \`python scripts/trigger-backfill.py\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚ö†Ô∏è Manual Deployment Notice" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This deployment was manually triggered and required explicit confirmation." >> $GITHUB_STEP_SUMMARY
        echo "All future production deployments must be manually initiated through GitHub Actions." >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ needs.deploy-production.result }}
        channel: '#deployments'
        text: |
          üö® **MANUAL PRODUCTION DEPLOYMENT** ${{ needs.deploy-production.result }}!
          
          **Triggered by:** ${{ github.actor }}
          **Environment:** ${{ env.ENVIRONMENT }}
          **Components:** ${{ github.event.inputs.components_to_deploy }}
          **Reason:** ${{ github.event.inputs.deployment_reason }}
          **Commit:** ${{ github.sha }}
          **Timestamp:** $(date -u)
          
          ${{ needs.deploy-production.result == 'success' && '‚úÖ Deployment successful - Ready for tenant setup and testing' || '‚ùå Deployment failed - Please check logs and retry' }}
          
          **Note:** This was a controlled manual deployment requiring explicit confirmation.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}